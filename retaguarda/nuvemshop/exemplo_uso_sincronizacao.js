/**
 * üñºÔ∏è Exemplo de Uso - Sistema de Sincroniza√ß√£o de Imagens Nuvemshop
 * 
 * Este arquivo demonstra como usar o sistema de sincroniza√ß√£o de imagens
 * implementado para a integra√ß√£o com a Nuvemshop.
 */

// ========================================
// 1. INICIALIZA√á√ÉO DOS COMPONENTES
// ========================================

// Inicializar o ProductUpdater com debug habilitado
const productUpdater = new ProductUpdater({
    debug: true,                                    // Logs detalhados
    useFetch: true,                                // Usar Fetch API (recomendado)
    proxyUrl: 'nuvemshop/nuvemshop_proxy.php'     // URL do proxy
});

// Inicializar o ImageManager (j√° inclu√≠do no ProductUpdater)
const imageManager = new ImageManager({
    debug: true,
    baseUrl: 'https://demo.gutty.app.br/upload/',  // Ajustar conforme seu dom√≠nio
    supportedExtensions: ['jpg', 'jpeg', 'png', 'gif', 'webp'],
    maxImages: 4
});

// ========================================
// 2. EXEMPLO 1: SINCRONIZA√á√ÉO MANUAL
// ========================================

async function exemploSincronizacaoManual() {
    console.log('üîÑ Exemplo 1: Sincroniza√ß√£o Manual de Imagens');
    
    const productId = '123456789';          // ID do produto na Nuvemshop
    const codigoGtin = '7898933880010';     // C√≥digo GTIN do produto
    
    try {
        // Primeiro, buscar o produto atual para obter as imagens existentes
        const response = await fetch(`nuvemshop/nuvemshop_proxy.php?operation=get_product&product_id=${productId}`);
        const currentProduct = await response.json();
        
        if (currentProduct.error) {
            console.error('‚ùå Erro ao buscar produto:', currentProduct.error);
            return;
        }
        
        const currentImages = currentProduct.images || [];
        console.log('üì∑ Imagens atuais na Nuvemshop:', currentImages);
        
        // Executar sincroniza√ß√£o
        await productUpdater.syncProductImages(
            productId,
            codigoGtin,
            currentImages,
            // Callback de sucesso
            (results) => {
                console.log('‚úÖ Sincroniza√ß√£o conclu√≠da com sucesso!');
                console.log('üìä Resultados:', results);
                
                // Exibir estat√≠sticas
                console.log(`‚ûï Imagens adicionadas: ${results.added.length}`);
                console.log(`üîÑ Imagens atualizadas: ${results.updated.length}`);
                console.log(`‚ùå Imagens removidas: ${results.removed.length}`);
                console.log(`‚ö†Ô∏è Erros: ${results.errors.length}`);
                
                if (results.errors.length > 0) {
                    console.log('üîç Detalhes dos erros:');
                    results.errors.forEach(err => {
                        console.log(`   - ${err.action.type} posi√ß√£o ${err.action.position}: ${err.error}`);
                    });
                }
            },
            // Callback de erro
            (error) => {
                console.error('‚ùå Erro na sincroniza√ß√£o:', error);
            }
        );
        
    } catch (error) {
        console.error('‚ùå Erro geral:', error);
    }
}

// ========================================
// 3. EXEMPLO 2: ATUALIZA√á√ÉO COM SINCRONIZA√á√ÉO AUTOM√ÅTICA
// ========================================

function exemploAtualizacaoComSincronizacao() {
    console.log('üîÑ Exemplo 2: Atualiza√ß√£o de Produto com Sincroniza√ß√£o Autom√°tica');
    
    // Dados do produto para atualiza√ß√£o
    const productData = {
        id: 123456789,                              // ID na Nuvemshop
        codigo_gtin: '7898933880010',               // C√≥digo GTIN (importante!)
        codigo_interno: 'PROD001',                  // C√≥digo interno
        descricao: 'Produto Exemplo Atualizado',
        descricao_detalhada: 'Descri√ß√£o detalhada do produto atualizado',
        preco_venda: '29.90',
        peso: '0.5',
        altura: '10',
        largura: '15',
        comprimento: '20'
    };
    
    // Atualizar produto (sincroniza√ß√£o de imagens √© autom√°tica)
    productUpdater.updateProduct(
        productData,
        // Callback de sucesso
        (response) => {
            console.log('‚úÖ Produto atualizado com sucesso!');
            console.log('üì¶ Resposta:', response);
            
            // Verificar se houve sincroniza√ß√£o de imagens
            if (response.imageSync) {
                if (response.imageSync.error) {
                    console.log('‚ö†Ô∏è Erro na sincroniza√ß√£o de imagens:', response.imageSync.error);
                } else {
                    console.log('üñºÔ∏è Sincroniza√ß√£o de imagens realizada:');
                    console.log(`   ‚ûï Adicionadas: ${response.imageSync.added.length}`);
                    console.log(`   üîÑ Atualizadas: ${response.imageSync.updated.length}`);
                    console.log(`   ‚ùå Removidas: ${response.imageSync.removed.length}`);
                }
            } else {
                console.log('‚ÑπÔ∏è Nenhuma sincroniza√ß√£o de imagens foi necess√°ria');
            }
        },
        // Callback de erro
        (error) => {
            console.error('‚ùå Erro ao atualizar produto:', error);
        }
    );
}

// ========================================
// 4. EXEMPLO 3: VERIFICA√á√ÉO DE IMAGENS LOCAIS
// ========================================

async function exemploVerificacaoImagensLocais() {
    console.log('üîç Exemplo 3: Verifica√ß√£o de Imagens Locais');
    
    const codigoGtin = '7898933880010';
    
    try {
        // Verificar quais imagens existem localmente
        const localImages = await imageManager.checkProductImages(codigoGtin);
        
        console.log(`üì∑ Imagens encontradas localmente: ${localImages.length}`);
        
        if (localImages.length > 0) {
            localImages.forEach(img => {
                console.log(`   Posi√ß√£o ${img.position}: ${img.src}`);
            });
        } else {
            console.log('   Nenhuma imagem encontrada no diret√≥rio /upload/');
        }
        
        // Preparar imagens para API (formato Nuvemshop)
        const apiImages = await imageManager.prepareImagesForApi(codigoGtin);
        console.log('üîß Imagens preparadas para API:', apiImages);
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar imagens:', error);
    }
}

// ========================================
// 5. EXEMPLO 4: COMPARA√á√ÉO DE IMAGENS
// ========================================

async function exemploComparacaoImagens() {
    console.log('‚öñÔ∏è Exemplo 4: Compara√ß√£o de Imagens');
    
    const codigoGtin = '7898933880010';
    
    // Simular imagens atuais na Nuvemshop
    const currentImages = [
        {
            id: 145,
            src: 'https://demo.gutty.app.br/upload/7898933880010.jpg',
            position: 1,
            product_id: 123456789
        },
        {
            id: 146,
            src: 'https://demo.gutty.app.br/upload/7898933880010_2_old.png',
            position: 2,
            product_id: 123456789
        }
    ];
    
    try {
        // Verificar imagens locais
        const localImages = await imageManager.checkProductImages(codigoGtin);
        
        // Usar m√©todo privado para compara√ß√£o (apenas para demonstra√ß√£o)
        // Em uso real, isso √© feito automaticamente pelo syncProductImages
        console.log('üìä Comparando imagens...');
        console.log('   Imagens locais:', localImages);
        console.log('   Imagens Nuvemshop:', currentImages);
        
        // Simular resultado da compara√ß√£o
        console.log('üìã A√ß√µes que seriam executadas:');
        console.log('   ‚ûï Adicionar: imagens locais que n√£o existem na Nuvemshop');
        console.log('   üîÑ Atualizar: imagens com URLs diferentes');
        console.log('   ‚ùå Remover: imagens da Nuvemshop que n√£o existem localmente');
        
    } catch (error) {
        console.error('‚ùå Erro na compara√ß√£o:', error);
    }
}

// ========================================
// 6. EXEMPLO 5: TRATAMENTO DE ERROS
// ========================================

async function exemploTratamentoErros() {
    console.log('üõ°Ô∏è Exemplo 5: Tratamento de Erros');
    
    const productId = '999999999';          // ID inexistente
    const codigoGtin = '0000000000000';     // C√≥digo sem imagens
    
    try {
        // Tentar sincronizar com dados inv√°lidos
        await productUpdater.syncProductImages(
            productId,
            codigoGtin,
            [],
            (results) => {
                console.log('‚úÖ Sincroniza√ß√£o conclu√≠da (inesperado):', results);
            },
            (error) => {
                console.log('‚ö†Ô∏è Erro capturado corretamente:', error.message);
                console.log('   O sistema continua funcionando normalmente');
            }
        );
        
    } catch (error) {
        console.log('üõ°Ô∏è Erro tratado pelo try/catch:', error.message);
    }
}

// ========================================
// 7. FUN√á√ïES UTILIT√ÅRIAS
// ========================================

/**
 * Fun√ß√£o para executar todos os exemplos
 */
async function executarTodosExemplos() {
    console.log('üöÄ Executando todos os exemplos...\n');
    
    await exemploVerificacaoImagensLocais();
    console.log('\n' + '='.repeat(50) + '\n');
    
    await exemploComparacaoImagens();
    console.log('\n' + '='.repeat(50) + '\n');
    
    await exemploTratamentoErros();
    console.log('\n' + '='.repeat(50) + '\n');
    
    // Exemplos que requerem dados reais (comentados por seguran√ßa)
    // await exemploSincronizacaoManual();
    // exemploAtualizacaoComSincronizacao();
    
    console.log('‚úÖ Todos os exemplos executados!');
}

/**
 * Fun√ß√£o para testar conectividade com a API
 */
async function testarConectividade() {
    console.log('üîå Testando conectividade com a API...');
    
    try {
        const response = await fetch('nuvemshop/nuvemshop_proxy.php?operation=test');
        const data = await response.json();
        
        if (data.error) {
            console.log('‚ùå Erro de conectividade:', data.error);
        } else {
            console.log('‚úÖ Conectividade OK');
        }
    } catch (error) {
        console.log('‚ùå Erro de rede:', error.message);
    }
}

// ========================================
// 8. EXECU√á√ÉO DOS EXEMPLOS
// ========================================

// Executar quando a p√°gina carregar
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìö Exemplos de Uso - Sistema de Sincroniza√ß√£o de Imagens');
    console.log('Para executar os exemplos, use as fun√ß√µes dispon√≠veis:');
    console.log('- exemploVerificacaoImagensLocais()');
    console.log('- exemploComparacaoImagens()');
    console.log('- exemploTratamentoErros()');
    console.log('- executarTodosExemplos()');
    console.log('- testarConectividade()');
    console.log('\nPara exemplos com dados reais, descomente e ajuste os IDs nos exemplos 1 e 2.');
});

// Exportar fun√ß√µes para uso global
window.exemploSincronizacaoManual = exemploSincronizacaoManual;
window.exemploAtualizacaoComSincronizacao = exemploAtualizacaoComSincronizacao;
window.exemploVerificacaoImagensLocais = exemploVerificacaoImagensLocais;
window.exemploComparacaoImagens = exemploComparacaoImagens;
window.exemploTratamentoErros = exemploTratamentoErros;
window.executarTodosExemplos = executarTodosExemplos;
window.testarConectividade = testarConectividade;
